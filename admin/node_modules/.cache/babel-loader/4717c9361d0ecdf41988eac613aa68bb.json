{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shubh\\\\OneDrive\\\\Desktop\\\\syntup-main\\\\admin\\\\src\\\\containers\\\\Categories\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Modal, Button } from 'react-bootstrap';\nimport Header from '../../components/Header';\nimport { getAllCategory, addCategory } from '../../actions';\nimport Input from '../../components/UI/Input';\nimport CheckboxTree from 'react-checkbox-tree';\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\nimport { AiFillCheckCircle, AiOutlineCheckCircle } from \"react-icons/ai\";\nimport { BiDownArrow, BiRightArrow } from \"react-icons/bi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Category = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const category = useSelector(state => state.category);\n  const [categoryName, setcategoryName] = useState('');\n  const [parentCategoryId, setParentCategoryId] = useState('');\n  const [categoryImage, setCategoryImage] = useState('');\n  const [show, setShow] = useState(false);\n  const [checked, setChecked] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const [checkedArray, setCheckedArray] = useState([]);\n  const [expandedArray, setExpandedArray] = useState([]);\n  const [updateCategoryModal, setUpdateCategoryModal] = useState(false);\n  useEffect(() => {\n    console.log('Category.js');\n    dispatch(getAllCategory());\n  }, []);\n\n  const handleClose = () => {\n    const form = new FormData();\n    form.append('name', categoryName);\n    form.append('parentId', parentCategoryId);\n    form.append('CategoryImage', categoryImage);\n    dispatch(addCategory(form)).then(result => {\n      if (result) {\n        dispatch(getAllCategory());\n      }\n    }); // const cat = {\n    //     categoryName,\n    //     parentCategoryId,\n    //     categoryImage\n    // };\n\n    setShow(false);\n  };\n\n  const handleShow = () => setShow(true);\n\n  const showCategories = categories => {\n    let categorylist = [];\n\n    for (let category of categories) {\n      categorylist.push({\n        label: category.name,\n        value: category._id,\n        children: category.children.length > 0 && showCategories(category.children)\n      });\n    }\n\n    return categorylist;\n  };\n\n  const createCategoryList = (categories, options = []) => {\n    for (let category of categories) {\n      options.push({\n        value: category._id,\n        name: category.name,\n        parentId: category.parentId\n      });\n\n      if (category.children.length > 0) {\n        createCategoryList(category.children, options);\n      }\n    }\n\n    return options;\n  };\n\n  const handleCategoryImage = e => {\n    setCategoryImage(e.target.files[0]);\n  };\n\n  const updateCategory = () => {\n    setUpdateCategoryModal(true);\n    const categories = createCategoryList(category.categories);\n    const checkedArray = [];\n    const expandedArray = [];\n    checked.length > 0 && checked.forEach((categoryId, index) => {\n      const category = categories.find((category, _index) => categoryId == category.value);\n      category && checkedArray.push(category);\n    });\n    expanded.length > 0 && expanded.forEach((categoryId, index) => {\n      const category = categories.find((category, _index) => categoryId == category.value);\n      category && expandedArray.push(category);\n    });\n    setCheckedArray(checkedArray);\n    setExpandedArray(expandedArray);\n    console.log({\n      checked,\n      expanded,\n      categories,\n      checkedArray,\n      expandedArray\n    });\n  };\n\n  const handleCategoryInput = (key, value, index, type) => {\n    if (type == \"checked\") {\n      const updatedCheckedArray = checkedArray.map((item, _index) => index == _index ? { ...item,\n        [key]: value\n      } : item);\n      setCheckedArray(updatedCheckedArray);\n    } else if (type == \"expanded\") {\n      const updatedExpandedArray = expandedArray.map((item, _index) => index == _index ? { ...item,\n        [key]: value\n      } : item);\n      setExpandedArray(updatedExpandedArray);\n    }\n  };\n\n  const renderUpdateCategoriesModal = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        show: updateCategoryModal,\n        handleClose: () => setUpdateCategoryModal(false),\n        size: \"lg\",\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Update Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"h6\", {\n                children: \"Expanded\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this), expandedArray.length > 0 && expandedArray.map((item, index) => /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                value: item.name,\n                placeholder: 'Category Name',\n                onChange: e => handleCategoryInput('name', e.target.value, index, 'expanded')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"form-control\",\n                value: item.parentId,\n                onChange: e => handleCategoryInput('parentId', e.target.value, index, 'expanded'),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  children: \"Select category\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 45\n                }, this), createCategoryList(category.categories).map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: option.value,\n                  children: option.name\n                }, option.value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 53\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"form-control\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"store\",\n                  children: \"Store\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"product\",\n                  children: \"Product\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"page\",\n                  children: \"Page\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 33\n          }, this)), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: \"Checked Categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this), checkedArray.length > 0 && checkedArray.map((item, index) => /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                value: item.name,\n                placeholder: 'Category Name',\n                onChange: e => handleCategoryInput('name', e.target.value, index, 'checked')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"form-control\",\n                value: item.parentId,\n                onChange: e => handleCategoryInput('parentId', e.target.value, index, 'checked'),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  children: \"Select category\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 45\n                }, this), createCategoryList(category.categories).map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: option.value,\n                  children: option.name\n                }, option.value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 53\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"form-control\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"store\",\n                  children: \"Store\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"product\",\n                  children: \"Product\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"page\",\n                  children: \"Page\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: handleClose,\n            children: \"Update Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderAddCategoryModal = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        show: show,\n        onHide: handleClose,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Add New Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            value: categoryName,\n            placeholder: 'Category Name',\n            onChange: e => setcategoryName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: parentCategoryId,\n            onChange: e => setParentCategoryId(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Select category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 25\n            }, this), createCategoryList(category.categories).map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.value,\n              children: option.name\n            }, option.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            name: \"categoryImage\",\n            onChange: handleCategoryImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: handleClose,\n            children: \"Save Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"categories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleShow,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CheckboxTree, {\n      nodes: showCategories(category.categories),\n      checked: checked,\n      expanded: expanded,\n      onCheck: checked => {\n        setChecked(checked);\n      },\n      onExpand: expanded => {\n        setExpanded(expanded);\n      },\n      icons: {\n        check: /*#__PURE__*/_jsxDEV(AiFillCheckCircle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 28\n        }, this),\n        uncheck: /*#__PURE__*/_jsxDEV(AiOutlineCheckCircle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 30\n        }, this),\n        expandClose: /*#__PURE__*/_jsxDEV(BiRightArrow, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 34\n        }, this),\n        expandOpen: /*#__PURE__*/_jsxDEV(BiDownArrow, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 33\n        }, this),\n        halfCheck: /*#__PURE__*/_jsxDEV(AiOutlineCheckCircle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 32\n        }, this)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateCategory,\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 13\n    }, this), renderAddCategoryModal(), renderUpdateCategoriesModal()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 294,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Category, \"f+jqJTiUSWvyxLAig14m15tY/PE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Category;\nexport default Category;\n\nvar _c;\n\n$RefreshReg$(_c, \"Category\");","map":{"version":3,"sources":["C:/Users/shubh/OneDrive/Desktop/syntup-main/admin/src/containers/Categories/index.js"],"names":["React","useEffect","useState","Row","Col","useDispatch","useSelector","Modal","Button","Header","getAllCategory","addCategory","Input","CheckboxTree","AiFillCheckCircle","AiOutlineCheckCircle","BiDownArrow","BiRightArrow","Category","props","dispatch","category","state","categoryName","setcategoryName","parentCategoryId","setParentCategoryId","categoryImage","setCategoryImage","show","setShow","checked","setChecked","expanded","setExpanded","checkedArray","setCheckedArray","expandedArray","setExpandedArray","updateCategoryModal","setUpdateCategoryModal","console","log","handleClose","form","FormData","append","then","result","handleShow","showCategories","categories","categorylist","push","label","name","value","_id","children","length","createCategoryList","options","parentId","handleCategoryImage","e","target","files","updateCategory","forEach","categoryId","index","find","_index","handleCategoryInput","key","type","updatedCheckedArray","map","item","updatedExpandedArray","renderUpdateCategoriesModal","option","renderAddCategoryModal","check","uncheck","expandClose","expandOpen","halfCheck"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport Header from '../../components/Header';\r\nimport { getAllCategory, addCategory } from '../../actions';\r\nimport Input from '../../components/UI/Input';\r\nimport CheckboxTree from 'react-checkbox-tree';\r\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\r\nimport { AiFillCheckCircle, AiOutlineCheckCircle } from \"react-icons/ai\";\r\nimport { BiDownArrow, BiRightArrow } from \"react-icons/bi\";\r\n\r\nconst Category = (props) => {\r\n    const dispatch = useDispatch();\r\n    const category = useSelector(state => state.category);\r\n    const [categoryName, setcategoryName] = useState('');\r\n    const [parentCategoryId, setParentCategoryId] = useState('');\r\n    const [categoryImage, setCategoryImage] = useState('');\r\n    const [show, setShow] = useState(false);\r\n    const [checked, setChecked] = useState([]);\r\n    const [expanded, setExpanded] = useState([]);\r\n    const [checkedArray, setCheckedArray] = useState([]);\r\n    const [expandedArray, setExpandedArray] = useState([]);\r\n    const [updateCategoryModal, setUpdateCategoryModal] = useState(false);\r\n\r\n    useEffect(() => {\r\n        console.log('Category.js')\r\n        dispatch(getAllCategory());\r\n\r\n    }, []);\r\n\r\n    const handleClose = () => {\r\n        const form = new FormData();\r\n\r\n\r\n        form.append('name', categoryName);\r\n        form.append('parentId', parentCategoryId);\r\n        form.append('CategoryImage', categoryImage);\r\n        dispatch(addCategory(form)).then((result) => {\r\n            if (result) {\r\n                dispatch(getAllCategory());\r\n            }\r\n        });\r\n\r\n        // const cat = {\r\n        //     categoryName,\r\n        //     parentCategoryId,\r\n        //     categoryImage\r\n        // };\r\n\r\n\r\n\r\n\r\n        setShow(false);\r\n    }\r\n\r\n\r\n    const handleShow = () => setShow(true);\r\n\r\n    const showCategories = (categories) => {\r\n\r\n        let categorylist = [];\r\n        for (let category of categories) {\r\n            categorylist.push(\r\n                {\r\n                    label: category.name,\r\n                    value: category._id,\r\n                    children: category.children.length > 0 && showCategories(category.children)\r\n                }\r\n            );\r\n        }\r\n        return categorylist;\r\n    }\r\n\r\n    const createCategoryList = (categories, options = []) => {\r\n        for (let category of categories) {\r\n            options.push({ value: category._id, name: category.name, parentId: category.parentId });\r\n            if (category.children.length > 0) {\r\n                createCategoryList(category.children, options)\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    const handleCategoryImage = (e) => {\r\n        setCategoryImage(e.target.files[0]);\r\n    }\r\n\r\n\r\n    const updateCategory = () => {\r\n        setUpdateCategoryModal(true);\r\n        const categories = createCategoryList(category.categories);\r\n        const checkedArray = [];\r\n        const expandedArray = [];\r\n        checked.length > 0 && checked.forEach((categoryId, index) => {\r\n            const category = categories.find((category, _index) => categoryId == category.value)\r\n            category && checkedArray.push(category);\r\n        })\r\n        expanded.length > 0 && expanded.forEach((categoryId, index) => {\r\n            const category = categories.find((category, _index) => categoryId == category.value)\r\n            category && expandedArray.push(category);\r\n        })\r\n\r\n        setCheckedArray(checkedArray);\r\n        setExpandedArray(expandedArray);\r\n\r\n\r\n\r\n        console.log({ checked, expanded, categories, checkedArray, expandedArray });\r\n    }\r\n\r\n    const handleCategoryInput = (key, value, index, type) => {\r\n        if (type == \"checked\") {\r\n            const updatedCheckedArray = checkedArray.map((item, _index) => index == _index ? { ...item, [key]: value } : item)\r\n            setCheckedArray(updatedCheckedArray);\r\n        } else if (type == \"expanded\") {\r\n            const updatedExpandedArray = expandedArray.map((item, _index) => index == _index ? { ...item, [key]: value } : item)\r\n            setExpandedArray(updatedExpandedArray);\r\n        }\r\n    }\r\n\r\n    const renderUpdateCategoriesModal = () => {\r\n        return (\r\n            <div>\r\n                {/* Edit Category */}\r\n\r\n                <Modal show={updateCategoryModal}\r\n                    handleClose={() => setUpdateCategoryModal(false)}\r\n                    size='lg'\r\n                >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Update Category</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <h6>Expanded</h6>\r\n                            </Col>\r\n                        </Row>\r\n                        {\r\n                            expandedArray.length > 0 &&\r\n                            expandedArray.map((item, index) =>\r\n                                <Row key={index}>\r\n                                    <Col>\r\n                                        <Input\r\n                                            value={item.name}\r\n                                            placeholder={'Category Name'}\r\n                                            onChange={(e) => handleCategoryInput('name', e.target.value, index, 'expanded')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            value={item.parentId}\r\n                                            onChange={(e) => handleCategoryInput('parentId', e.target.value, index, 'expanded')}>\r\n\r\n                                            <option>Select category</option>\r\n                                            {\r\n                                                createCategoryList(category.categories).map(option =>\r\n                                                    <option key={option.value} value={option.value}>{option.name}</option>)\r\n                                            }\r\n                                        </select>\r\n                                    </Col>\r\n\r\n                                    <Col>\r\n\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                        >\r\n                                            <option value=\"\">Select Type</option>\r\n                                            <option value=\"store\">Store</option>\r\n                                            <option value=\"product\">Product</option>\r\n                                            <option value=\"page\">Page</option>\r\n                                        </select>\r\n\r\n                                    </Col>\r\n                                </Row>\r\n                            )\r\n                        }\r\n                        <h6>Checked Categories</h6>\r\n                        {\r\n                            checkedArray.length > 0 &&\r\n                            checkedArray.map((item, index) =>\r\n                                <Row key={index}>\r\n                                    <Col>\r\n                                        <Input\r\n                                            value={item.name}\r\n                                            placeholder={'Category Name'}\r\n                                            onChange={(e) => handleCategoryInput('name', e.target.value, index, 'checked')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            value={item.parentId}\r\n                                            onChange={(e) => handleCategoryInput('parentId', e.target.value, index, 'checked')}>\r\n\r\n                                            <option>Select category</option>\r\n                                            {\r\n                                                createCategoryList(category.categories).map(option =>\r\n                                                    <option key={option.value} value={option.value}>{option.name}</option>)\r\n                                            }\r\n                                        </select>\r\n                                    </Col>\r\n\r\n                                    <Col>\r\n\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                        >\r\n                                            <option value=\"\">Select Type</option>\r\n                                            <option value=\"store\">Store</option>\r\n                                            <option value=\"product\">Product</option>\r\n                                            <option value=\"page\">Page</option>\r\n                                        </select>\r\n\r\n                                    </Col>\r\n                                </Row>\r\n                            )\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        {/* <input type=\"file\" name= \"categoryImage\" onChange={handleCategoryImage} /> */}\r\n\r\n\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n\r\n                        <Button variant=\"primary\" onClick={handleClose}>\r\n                            Update Changes\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderAddCategoryModal = () => {\r\n        return (\r\n            <div> \r\n                            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Add New Category</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Input\r\n                        value={categoryName}\r\n                        placeholder={'Category Name'}\r\n                        onChange={(e) => setcategoryName(e.target.value)}\r\n                    />\r\n\r\n                    <select\r\n                        className=\"form-control\"\r\n                        value={parentCategoryId}\r\n                        onChange={(e) => setParentCategoryId(e.target.value)}>\r\n\r\n                        <option>Select category</option>\r\n                        {\r\n                            createCategoryList(category.categories).map(option =>\r\n                                <option key={option.value} value={option.value}>{option.name}</option>)\r\n                        }\r\n                    </select>\r\n\r\n                    <input type=\"file\" name=\"categoryImage\" onChange={handleCategoryImage} />\r\n\r\n\r\n\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n\r\n                    <Button variant=\"primary\" onClick={handleClose}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>categories</h1>\r\n            <button onClick={handleShow}>Add</button>\r\n\r\n            <CheckboxTree\r\n\r\n                nodes={showCategories(category.categories)}\r\n\r\n                checked={checked}\r\n                expanded={expanded}\r\n                onCheck={(checked) => { setChecked(checked) }}\r\n                onExpand={(expanded) => { setExpanded(expanded) }}\r\n\r\n\r\n                icons={{\r\n                    check: <AiFillCheckCircle />,\r\n                    uncheck: <AiOutlineCheckCircle />,\r\n                    expandClose: <BiRightArrow />,\r\n                    expandOpen: <BiDownArrow />,\r\n                    halfCheck: <AiOutlineCheckCircle />,\r\n\r\n                }}\r\n            />\r\n\r\n            {/*edit button ka idhar h */}\r\n\r\n            <Row>\r\n                <button>Delete</button>\r\n                <button onClick={updateCategory}>Edit</button>\r\n            </Row>\r\n        {renderAddCategoryModal()}\r\n           {renderUpdateCategoriesModal()} \r\n\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Category;\r\n"]},"metadata":{},"sourceType":"module"}