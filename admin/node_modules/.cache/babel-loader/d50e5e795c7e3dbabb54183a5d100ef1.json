{"ast":null,"code":"import axiosInstance from \"../helpers/axios\";\nimport axios from \"../helpers/axios\";\nimport { categoryConstants } from \"./constants\";\nexport const getAllCategory = () => {\n  return async dispatch => {\n    dispatch({\n      type: categoryConstants.GET_ALL_CATEGORIES_REQUEST\n    });\n    const res = await axios.get('/category/getcategory');\n    console.log(res);\n\n    if (res.status === 200) {\n      const {\n        categoryList\n      } = res.data;\n      dispatch({\n        type: categoryConstants.GET_ALL_CATEGORIES_SUCCESS,\n        payload: {\n          categories: categoryList\n        }\n      });\n      return true;\n    } else {\n      dispatch({\n        type: categoryConstants.GET_ALL_CATEGORIES_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};\nexport const addCategory = form => {\n  return async dispatch => {\n    dispatch({\n      type: categoryConstants.ADD_NEW_CATEGORY_REQUEST\n    });\n    const res = await axios.post(`/category/create`, form);\n\n    if (res.status === 201) {\n      dispatch({\n        type: categoryConstants.ADD_NEW_CATEGORY_SUCCESS,\n        payload: res.data.category\n      });\n      return true;\n    } else {\n      dispatch({\n        type: categoryConstants.ADD_NEW_CATEGORY_FAILURE,\n        payload: res.data.error\n      });\n    }\n  };\n};\nexport const updateCategories = form => {\n  return async dispatch => {\n    const res = await axios.post(`/category/update`, form);\n\n    if (res.status === 201) {\n      console.log(res);\n    } else {\n      console.log(res);\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/shubh/OneDrive/Desktop/syntup-main/admin/src/actions/category.js"],"names":["axiosInstance","axios","categoryConstants","getAllCategory","dispatch","type","GET_ALL_CATEGORIES_REQUEST","res","get","console","log","status","categoryList","data","GET_ALL_CATEGORIES_SUCCESS","payload","categories","GET_ALL_CATEGORIES_FAILURE","error","addCategory","form","ADD_NEW_CATEGORY_REQUEST","post","ADD_NEW_CATEGORY_SUCCESS","category","ADD_NEW_CATEGORY_FAILURE","updateCategories"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,SAASC,iBAAT,QAAkC,aAAlC;AAEA,OAAO,MAAMC,cAAc,GAAE,MAAM;AAC/B,SAAO,MAAMC,QAAN,IAAkB;AACrBA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACH,iBAAiB,CAACI;AAAxB,KAAD,CAAR;AACA,UAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAU,uBAAV,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;;AACA,QAAGA,GAAG,CAACI,MAAJ,KAAa,GAAhB,EAAoB;AAChB,YAAM;AAACC,QAAAA;AAAD,UAAgBL,GAAG,CAACM,IAA1B;AACAT,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAACH,iBAAiB,CAACY,0BADlB;AAELC,QAAAA,OAAO,EAAC;AAACC,UAAAA,UAAU,EAACJ;AAAZ;AAFH,OAAD,CAAR;AAIA,aAAO,IAAP;AACH,KAPD,MAOK;AACDR,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAACH,iBAAiB,CAACe,0BADlB;AAELF,QAAAA,OAAO,EAAC;AAACG,UAAAA,KAAK,EAACX,GAAG,CAACM,IAAJ,CAASK;AAAhB;AAFH,OAAD,CAAR;AAIH;AACJ,GAjBD;AAkBH,CAnBM;AAqBP,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACjC,SAAO,MAAMhB,QAAN,IAAkB;AACrBA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACH,iBAAiB,CAACmB;AAAxB,KAAD,CAAR;AACA,UAAMd,GAAG,GAAG,MAAMN,KAAK,CAACqB,IAAN,CAAY,kBAAZ,EAA8BF,IAA9B,CAAlB;;AACA,QAAGb,GAAG,CAACI,MAAJ,KAAe,GAAlB,EAAsB;AAClBP,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAACH,iBAAiB,CAACqB,wBADlB;AAELR,QAAAA,OAAO,EAACR,GAAG,CAACM,IAAJ,CAASW;AAFZ,OAAD,CAAR;AAIA,aAAO,IAAP;AAGC,KARL,MAQS;AACDpB,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAACH,iBAAiB,CAACuB,wBADlB;AAELV,QAAAA,OAAO,EAACR,GAAG,CAACM,IAAJ,CAASK;AAFZ,OAAD,CAAR;AAKP;AAEJ,GAnBD;AAoBH,CArBM;AAuBP,OAAO,MAAMQ,gBAAgB,GAAIN,IAAD,IAAU;AACtC,SAAO,MAAMhB,QAAN,IAAkB;AACrB,UAAMG,GAAG,GAAG,MAAMN,KAAK,CAACqB,IAAN,CAAY,kBAAZ,EAA8BF,IAA9B,CAAlB;;AACA,QAAGb,GAAG,CAACI,MAAJ,KAAe,GAAlB,EAAsB;AAClBF,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AAGC,KAJL,MAIS;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AAEH;AACJ,GAVL;AAYC,CAbE","sourcesContent":["import axiosInstance from \"../helpers/axios\"\nimport axios from \"../helpers/axios\";\nimport { categoryConstants } from \"./constants\";\n\nexport const getAllCategory =() => {\n    return async dispatch => {\n        dispatch({type:categoryConstants.GET_ALL_CATEGORIES_REQUEST})\n        const res = await axios.get('/category/getcategory');\n        console.log(res);\n        if(res.status===200){\n            const {categoryList}= res.data;\n            dispatch({\n                type:categoryConstants.GET_ALL_CATEGORIES_SUCCESS,\n                payload:{categories:categoryList}\n            });\n            return true;\n        }else{\n            dispatch({\n                type:categoryConstants.GET_ALL_CATEGORIES_FAILURE,\n                payload:{error:res.data.error}\n            });\n        }\n    }\n}\n\nexport const addCategory = (form) => {\n    return async dispatch => {\n        dispatch({type:categoryConstants.ADD_NEW_CATEGORY_REQUEST});\n        const res = await axios.post(`/category/create`,form);\n        if(res.status === 201){\n            dispatch({\n                type:categoryConstants.ADD_NEW_CATEGORY_SUCCESS,\n                payload:res.data.category\n            });\n            return true;\n\n\n            }else{\n                dispatch({\n                    type:categoryConstants.ADD_NEW_CATEGORY_FAILURE,\n                    payload:res.data.error\n\n            });\n        }\n\n    }\n}\n\nexport const updateCategories = (form) => {\n    return async dispatch => {\n        const res = await axios.post(`/category/update`,form);\n        if(res.status === 201){\n            console.log(res);\n\n\n            }else{\n                console.log(res);\n\n            }\n        }\n\n    }\n"]},"metadata":{},"sourceType":"module"}